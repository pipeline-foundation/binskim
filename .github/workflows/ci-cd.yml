name: CI Pipeline

on: [ push, pull_request, workflow_dispatch ]

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    env:
      pathToSolution: src/BinSkim.sln
      testResultsFolderName: Test results
      publishOutputFolderName: Publish output
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: true

      # Tooling setup

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.411

      # Build and test validation

      - name: Restore solution
        shell: pwsh
        run: |
          $pathToSolution = "${{ env.pathToSolution }}"

          dotnet restore $pathToSolution

      - name: Build solution
        shell: pwsh
        run: |
          $pathToSolution = "${{ env.pathToSolution }}"
          $configurationSetting = "Debug"

          dotnet build $pathToSolution `
          --configuration $configurationSetting `
          --no-restore

      - name: Run unit tests
        continue-on-error: true
        shell: pwsh
        run: |
          $testProjects = "Test.FunctionalTests.BinSkim.Rules/Test.FunctionalTests.BinSkim.Rules.csproj", "Test.FunctionalTests.BinSkim.Driver/Test.FunctionalTests.BinSkim.Driver.csproj", "Test.UnitTests.BinaryParsers/Test.UnitTests.BinaryParsers.csproj", "Test.UnitTests.BinSkim.Rules/Test.UnitTests.BinSkim.Rules.csproj", "Test.UnitTests.BinSkim.Driver/Test.UnitTests.BinSkim.Driver.csproj"
          $configurationSetting = "Debug"
          $testOutputFolder = "${{ env.testResultsFolderName }}"

          foreach ( $project in $testProjects ) {
            $projectName = $project.Name

            dotnet test $project `
            --configuration $configurationSetting `
            --logger "trx;LogFilePath=$testOutputFolder/$projectName/TestResults.trx;verbosity=normal" `
            --results-directory $testOutputFolder/$projectName `
            --no-build
          }

      # Artifact generation

      - name: Publish project for each target framework
        shell: pwsh
        run: |
          $pathToProject = "src/BinSkim.Driver/BinSkim.Driver.csproj"
          $configurationSetting = "Debug"
          $publishOutputFolder = "${{ env.publishOutputFolderName }}"
          $projectVersion = "${{ steps.version_determiner.outputs.project_version }}"
          $frameworkVersion = "netcoreapp3.1"
          $runtimeIdentifiers = "win-x86","win-x64","linux-x64"

          foreach ( $runtimeIdentifier in $runtimeIdentifiers ) {
            dotnet publish $pathToProject `
            --configuration $configurationSetting `
            --output "$publishOutputFolder/$frameworkVersion/$runtimeIdentifier" `
            --framework $frameworkVersion `
            --runtime $runtimeIdentifier `
            --no-restore
          }

      # Artifact publish to pipeline

      - name: Upload test results as pipeline artifact
        uses: actions/upload-artifact@v2
        with:
          name: Test results
          path: "${{ env.testResultsFolderName }}"

      - name: Upload publish output as pipeline artifact
        uses: actions/upload-artifact@v2
        with:
          name: Publish outputs
          path: "${{ env.publishOutputFolderName }}"

# Built with ‚ù§ by [Pipeline Foundation](https://pipeline.foundation)